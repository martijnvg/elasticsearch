[[percolator]]
=== Percolator type

The `percolator` field type parses a json structure into a native query and
stores that query, so that the <<query-dsl-percolate-query,percolate query>>
can use it to match provided documents.

Any field that contains a json object can be configured to be a percolator
field. The percolator field type has no settings. Just configuring the `percolator`
field type is sufficient to instruct Elasticsearch to treat a field as a
query.

If the following mapping configures the `percolator` field type for the
`query` field:

[source,js]
--------------------------------------------------
PUT my_index
{
    "mappings": {
        "doc": {
            "properties": {
                "query": {
                    "type": "percolator"
                },
                "field": {
                    "type": "text"
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TESTSETUP

Then you can index a query:

[source,js]
--------------------------------------------------
PUT my_index/doc/match_value
{
    "query" : {
        "match" : {
            "field" : "value"
        }
    }
}
--------------------------------------------------
// CONSOLE

[IMPORTANT]
=====================================

Fields referred to in a percolator query must *already* exist in the mapping
associated with the index used for percolation. In order to make sure these fields exist,
add or update a mapping via the <<indices-create-index,create index>> or <<indices-put-mapping,put mapping>> APIs.
Fields referred in a percolator query may exist in any type of the index containing the `percolator` field type.

Also an index can only contain up to one percolator field mapping. Multiple percolator fields will be rejected by the
put index and put mapping APIs.

=====================================

[float]
==== Optimizing query time text analysis

When the percolator verifies a percolator candidate match it is going to parse, perform query time text analysis and actually run
the percolator query on the document being percolated. This is done for each candidate match and every time the `percolate` query executes.
If your query time text analysis is relatively expensive part of query parsing then text analysis can become the
dominating factor time is being spent on when percolating. This query parsing overhead can become noticeable when the
percolator ends up verifying many candidate percolator query matches.

To avoid the most expensive part of text analysis at percolate time. One can choose to do the expensive part of text analysis
when indexing the percolator query. This requires using two different analyzers. The first analyzer actually performs
text analysis that needs be performed (expensive part). The second analyzer (usually whitespace) just splits the generated tokens
that the first analyzer has produced. Then before indexing a percolator query, the analyze api should be used to analyze the query
text with the more expensive analyzer. The result of the analyze api, the tokens, should be used to substitute the original query
text in the percolator query. It is important that the query should now be configured to override the analyzer from the mapping and
just the second analyzer. Most text based queries support an `analyzer` option (`match`, `query_string`, `simple_query_string`).
Using this approach the expensive text analysis is performed once instead of many times.

Lets take a look at an example with the following mapping and settings:

[source,js]
--------------------------------------------------
PUT /test_index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer" : {
          "tokenizer": "standard",
          "filter" : ["lowercase", "porter_stem"]
        }
      }
    }
  },
  "mappings": {
    "doc" : {
      "properties": {
        "query" : {
          "type": "percolator"
        },
        "body" : {
          "type": "text",
          "analyzer": "my_analyzer" <1>
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

<1> For the purpose of this example, this analyzer is deemed expensive.

and percolator query that we want to index:

[source,js]
--------------------------------------------------
{
  "query" : {
    "match" : {
      "body" : {
        "query" : "missing bicycles"
      }
    }
  }
}
--------------------------------------------------

First we need to use the analyze api to perform the text analysis prior to indexing:

[source,js]
--------------------------------------------------
POST /test_index/_analyze
{
  "analyzer" : "expensive_analyzer",
  "text" : "missing bicycles"
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

This results the following response:

[source,js]
--------------------------------------------------
{
  "tokens": [
    {
      "token": "miss",
      "start_offset": 0,
      "end_offset": 7,
      "type": "<ALPHANUM>",
      "position": 0
    },
    {
      "token": "bicycl",
      "start_offset": 8,
      "end_offset": 16,
      "type": "<ALPHANUM>",
      "position": 1
    }
  ]
}
--------------------------------------------------
// TESTRESPONSE

All the tokens in the returned order need to replace the query text in the percolator query:

[source,js]
--------------------------------------------------
PUT /test_index/doc/1
{
  "query" : {
    "match" : {
      "body" : {
        "query" : "miss bicycl",
        "analyzer" : "whitespace" <1>
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

<1> It is important to select a whitespace analyzer here, otherwise the analyzer defined in the mapping will be used,
which defeats the point of using this workflow. Note that `whitespace` is a built-in analyzer, if a different analyzer
needs to be used, it needs to be configured first in the index's settings.

The analyze api prior to the indexing the percolator flow should be done for each percolator query.

At percolate time nothing changes and the `percolate` query can be defined normally:

[source,js]
--------------------------------------------------
GET _search
{
  "query": {
    "percolate" : {
      "field" : "query",
      "document_type" : "doc",
      "document" : {
        "body" : "Bycicles are missing"
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

This results in a response like this:

[source,js]
--------------------------------------------------
{
  "took": 6,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "failed": 0
  },
  "hits": {
    "total": 1,
    "max_score": 0.2876821,
    "hits": [
      {
        "_index": "test_index",
        "_type": "doc",
        "_id": "1",
        "_score": 0.2876821,
        "_source": {
          "query": {
            "match": {
              "body": {
                "query": "miss bicycl",
                "analyzer": "whitespace"
              }
            }
          }
        }
      }
    ]
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"took": 6,/"took": "$body.took",/]

[float]
==== Dedicated Percolator Index

Percolate queries can be added to any index. Instead of adding percolate queries to the index the data resides in,
these queries can also be added to a dedicated index. The advantage of this is that this dedicated percolator index
can have its own index settings (For example the number of primary and replica shards). If you choose to have a dedicated
percolate index, you need to make sure that the mappings from the normal index are also available on the percolate index.
Otherwise percolate queries can be parsed incorrectly.

[float]
==== Forcing Unmapped Fields to be Handled as Strings

In certain cases it is unknown what kind of percolator queries do get registered, and if no field mapping exists for fields
that are referred by percolator queries then adding a percolator query fails. This means the mapping needs to be updated
to have the field with the appropriate settings, and then the percolator query can be added. But sometimes it is sufficient
if all unmapped fields are handled as if these were default string fields. In those cases one can configure the
`index.percolator.map_unmapped_fields_as_string` setting to `true` (default to `false`) and then if a field referred in
a percolator query does not exist, it will be handled as a default string field so that adding the percolator query doesn't
fail.

[float]
==== Limitations

[float]
===== Parent/child

Because the `percolate` query is processing one document at a time, it doesn't support queries and filters that run
against child documents such as `has_child` and `has_parent`.

[float]
===== Fetching queries

There are a number of queries that fetch data via a get call during query parsing. For example the `terms` query when
using terms lookup, `template` query when using indexed scripts and `geo_shape` when using pre-indexed shapes. When these
queries are indexed by the `percolator` field type then the get call is executed once. So each time the `percolator`
query evaluates these queries, the fetches terms, shapes etc. as the were upon index time will be used. Important to note
is that fetching of terms that these queries do, happens both each time the percolator query gets indexed on both primary
and replica shards, so the terms that are actually indexed can be different between shard copies, if the source index
changed while indexing.

[float]
===== Script query

The script inside a `script` query can only access doc values fields. The `percolate` query indexes the provided document
into an in-memory index. This in-memory index doesn't support stored fields and because of that the `_source` field and
other stored fields are not stored. This is the reason why in the `script` query the `_source` and other stored fields
aren't available.
